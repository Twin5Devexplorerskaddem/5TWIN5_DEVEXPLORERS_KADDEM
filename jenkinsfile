pipeline {
agent any
  environment {
        // Définissez les informations de connexion SSH ici
        SSH_HOST = '172.10.0.140'
        SSH_USER = 'vagrant'
        SSH_PASSWORD = 'vagrant'
    }
    stages {
    

        stage('Checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'MedAmineElOudi-4TWIN5-G5-KADDEM']],
                        userRemoteConfigs: [[url: 'https://github.com/Twin5Devexplorerskaddem/5TWIN5_DEVEXPLORERS_KADDEM.git']]
                    ])
                }
            }
        }

        stage('Build') {
            steps {
                // Exécuter la construction Maven
                sh 'mvn clean install'
            }
        }

        stage('Debug') {
            steps {
                sh 'ls -R'
            }
        }

        stage('Unit Tests') {
            steps {
                sh 'mvn test'
            }
        }


        stage('sonarQube') {
            steps {
                sh 'mvn sonar:sonar'
            }
        }
        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy'
            }
        }
         stage('Push Docker Image to Docker Hub') {
                    steps {
                        script {
                            
                            sh 'docker tag kaddemoudiamine_app amineoudi/kaddemoudiamine_app:latest'
                            sh 'docker login -u amineoudi -p Aminee7777'
                            sh 'docker push amineoudi/kaddemoudiamine_app:latest'
                        }
                    }
                }


  stage("SSH Into k8s Server") {
            steps {
                script {
                    def remote = [:]
                    remote.name = 'K8S master'
                    remote.host = '172.10.0.140'
                    remote.user = 'vagrant'
                    remote.password = 'vagrant'
                    remote.allowAnyHosts = true

                    // Ajout d'une vérification avant l'exécution de la commande SSH
                    if (fileExists('k8s-spring-boot-deployment.yml')) {
                        sshPut remote: remote, from: 'k8s-spring-boot-deployment.yml', into: '.'
                    } else {
                        echo 'Le fichier k8s-spring-boot-deployment.yml n\'existe pas.'
                    }
                }
            }
        }
stage('Deploy spring boot') {
  steps {
    script {
      def remote = [
        name: 'K8S master',
        host: '172.10.0.140',
        user: 'jenkins-sa',  // Utiliser le nom du ServiceAccount
        password: '',
        allowAnyHosts: true
      ]

      sshCommand remote: remote, command: "kubectl apply -f k8s-spring-boot-deployment.yml"
    }
  }
}
         
     stage('Docker Compose Up') {
            steps {
                script {
                    // Exécutez docker-compose up
                    sh "docker-compose up -d"
                }
            }
        }

    }
post {
        always {
            cleanWs()
            mail bcc: '', 
            body: '''You have a Build !!! Don't forget to check it out ! ''', cc: '', from: '', replyTo: '', subject: 'Build successfull', to: 'amed14170@gmail.com'
        }
    }
}
